// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
	telebot "gopkg.in/telebot.v3"
)

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// Accept provides a mock function with given fields: query, errorMessage
func (_m *API) Accept(query *telebot.PreCheckoutQuery, errorMessage ...string) error {
	_va := make([]interface{}, len(errorMessage))
	for _i := range errorMessage {
		_va[_i] = errorMessage[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.PreCheckoutQuery, ...string) error); ok {
		r0 = rf(query, errorMessage...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddStickerToSet provides a mock function with given fields: of, name, sticker
func (_m *API) AddStickerToSet(of telebot.Recipient, name string, sticker telebot.InputSticker) error {
	ret := _m.Called(of, name, sticker)

	if len(ret) == 0 {
		panic("no return value specified for AddStickerToSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string, telebot.InputSticker) error); ok {
		r0 = rf(of, name, sticker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdminsOf provides a mock function with given fields: chat
func (_m *API) AdminsOf(chat *telebot.Chat) ([]telebot.ChatMember, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for AdminsOf")
	}

	var r0 []telebot.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) ([]telebot.ChatMember, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Chat) []telebot.ChatMember); ok {
		r0 = rf(chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.Chat) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Answer provides a mock function with given fields: query, resp
func (_m *API) Answer(query *telebot.Query, resp *telebot.QueryResponse) error {
	ret := _m.Called(query, resp)

	if len(ret) == 0 {
		panic("no return value specified for Answer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Query, *telebot.QueryResponse) error); ok {
		r0 = rf(query, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AnswerWebApp provides a mock function with given fields: query, r
func (_m *API) AnswerWebApp(query *telebot.Query, r telebot.Result) (*telebot.WebAppMessage, error) {
	ret := _m.Called(query, r)

	if len(ret) == 0 {
		panic("no return value specified for AnswerWebApp")
	}

	var r0 *telebot.WebAppMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Query, telebot.Result) (*telebot.WebAppMessage, error)); ok {
		return rf(query, r)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Query, telebot.Result) *telebot.WebAppMessage); ok {
		r0 = rf(query, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.WebAppMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.Query, telebot.Result) error); ok {
		r1 = rf(query, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApproveJoinRequest provides a mock function with given fields: chat, user
func (_m *API) ApproveJoinRequest(chat telebot.Recipient, user *telebot.User) error {
	ret := _m.Called(chat, user)

	if len(ret) == 0 {
		panic("no return value specified for ApproveJoinRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.User) error); ok {
		r0 = rf(chat, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ban provides a mock function with given fields: chat, member, revokeMessages
func (_m *API) Ban(chat *telebot.Chat, member *telebot.ChatMember, revokeMessages ...bool) error {
	_va := make([]interface{}, len(revokeMessages))
	for _i := range revokeMessages {
		_va[_i] = revokeMessages[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, chat, member)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ban")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.ChatMember, ...bool) error); ok {
		r0 = rf(chat, member, revokeMessages...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BanSenderChat provides a mock function with given fields: chat, sender
func (_m *API) BanSenderChat(chat *telebot.Chat, sender telebot.Recipient) error {
	ret := _m.Called(chat, sender)

	if len(ret) == 0 {
		panic("no return value specified for BanSenderChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, telebot.Recipient) error); ok {
		r0 = rf(chat, sender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BusinessConnection provides a mock function with given fields: id
func (_m *API) BusinessConnection(id string) (*telebot.BusinessConnection, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for BusinessConnection")
	}

	var r0 *telebot.BusinessConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.BusinessConnection, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.BusinessConnection); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.BusinessConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatByID provides a mock function with given fields: id
func (_m *API) ChatByID(id int64) (*telebot.Chat, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ChatByID")
	}

	var r0 *telebot.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*telebot.Chat, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *telebot.Chat); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatByUsername provides a mock function with given fields: name
func (_m *API) ChatByUsername(name string) (*telebot.Chat, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for ChatByUsername")
	}

	var r0 *telebot.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.Chat, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.Chat); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatMemberOf provides a mock function with given fields: chat, user
func (_m *API) ChatMemberOf(chat telebot.Recipient, user telebot.Recipient) (*telebot.ChatMember, error) {
	ret := _m.Called(chat, user)

	if len(ret) == 0 {
		panic("no return value specified for ChatMemberOf")
	}

	var r0 *telebot.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) (*telebot.ChatMember, error)); ok {
		return rf(chat, user)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) *telebot.ChatMember); ok {
		r0 = rf(chat, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Recipient) error); ok {
		r1 = rf(chat, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *API) Close() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseGeneralTopic provides a mock function with given fields: chat
func (_m *API) CloseGeneralTopic(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for CloseGeneralTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseTopic provides a mock function with given fields: chat, topic
func (_m *API) CloseTopic(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for CloseTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commands provides a mock function with given fields: opts
func (_m *API) Commands(opts ...interface{}) ([]telebot.Command, error) {
	var _ca []interface{}
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Commands")
	}

	var r0 []telebot.Command
	var r1 error
	if rf, ok := ret.Get(0).(func(...interface{}) ([]telebot.Command, error)); ok {
		return rf(opts...)
	}
	if rf, ok := ret.Get(0).(func(...interface{}) []telebot.Command); ok {
		r0 = rf(opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Command)
		}
	}

	if rf, ok := ret.Get(1).(func(...interface{}) error); ok {
		r1 = rf(opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Copy provides a mock function with given fields: to, msg, opts
func (_m *API) Copy(to telebot.Recipient, msg telebot.Editable, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Copy")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, msg, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, msg, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Editable, ...interface{}) error); ok {
		r1 = rf(to, msg, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyMany provides a mock function with given fields: to, msgs, opts
func (_m *API) CopyMany(to telebot.Recipient, msgs []telebot.Editable, opts ...*telebot.SendOptions) ([]telebot.Message, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, to, msgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyMany")
	}

	var r0 []telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) ([]telebot.Message, error)); ok {
		return rf(to, msgs, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) []telebot.Message); ok {
		r0 = rf(to, msgs, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) error); ok {
		r1 = rf(to, msgs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInviteLink provides a mock function with given fields: chat, link
func (_m *API) CreateInviteLink(chat telebot.Recipient, link *telebot.ChatInviteLink) (*telebot.ChatInviteLink, error) {
	ret := _m.Called(chat, link)

	if len(ret) == 0 {
		panic("no return value specified for CreateInviteLink")
	}

	var r0 *telebot.ChatInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.ChatInviteLink) (*telebot.ChatInviteLink, error)); ok {
		return rf(chat, link)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.ChatInviteLink) *telebot.ChatInviteLink); ok {
		r0 = rf(chat, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, *telebot.ChatInviteLink) error); ok {
		r1 = rf(chat, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoiceLink provides a mock function with given fields: i
func (_m *API) CreateInvoiceLink(i telebot.Invoice) (string, error) {
	ret := _m.Called(i)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoiceLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Invoice) (string, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(telebot.Invoice) string); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(telebot.Invoice) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStickerSet provides a mock function with given fields: of, set
func (_m *API) CreateStickerSet(of telebot.Recipient, set *telebot.StickerSet) error {
	ret := _m.Called(of, set)

	if len(ret) == 0 {
		panic("no return value specified for CreateStickerSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.StickerSet) error); ok {
		r0 = rf(of, set)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTopic provides a mock function with given fields: chat, topic
func (_m *API) CreateTopic(chat *telebot.Chat, topic *telebot.Topic) (*telebot.Topic, error) {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *telebot.Topic
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) (*telebot.Topic, error)); ok {
		return rf(chat, topic)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) *telebot.Topic); ok {
		r0 = rf(chat, topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Topic)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r1 = rf(chat, topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomEmojiStickers provides a mock function with given fields: ids
func (_m *API) CustomEmojiStickers(ids []string) ([]telebot.Sticker, error) {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for CustomEmojiStickers")
	}

	var r0 []telebot.Sticker
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]telebot.Sticker, error)); ok {
		return rf(ids)
	}
	if rf, ok := ret.Get(0).(func([]string) []telebot.Sticker); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Sticker)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineJoinRequest provides a mock function with given fields: chat, user
func (_m *API) DeclineJoinRequest(chat telebot.Recipient, user *telebot.User) error {
	ret := _m.Called(chat, user)

	if len(ret) == 0 {
		panic("no return value specified for DeclineJoinRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.User) error); ok {
		r0 = rf(chat, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DefaultRights provides a mock function with given fields: forChannels
func (_m *API) DefaultRights(forChannels bool) (*telebot.Rights, error) {
	ret := _m.Called(forChannels)

	if len(ret) == 0 {
		panic("no return value specified for DefaultRights")
	}

	var r0 *telebot.Rights
	var r1 error
	if rf, ok := ret.Get(0).(func(bool) (*telebot.Rights, error)); ok {
		return rf(forChannels)
	}
	if rf, ok := ret.Get(0).(func(bool) *telebot.Rights); ok {
		r0 = rf(forChannels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Rights)
		}
	}

	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(forChannels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: msg
func (_m *API) Delete(msg telebot.Editable) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Editable) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCommands provides a mock function with given fields: opts
func (_m *API) DeleteCommands(opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupPhoto provides a mock function with given fields: chat
func (_m *API) DeleteGroupPhoto(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPhoto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupStickerSet provides a mock function with given fields: chat
func (_m *API) DeleteGroupStickerSet(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupStickerSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMany provides a mock function with given fields: msgs
func (_m *API) DeleteMany(msgs []telebot.Editable) error {
	ret := _m.Called(msgs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]telebot.Editable) error); ok {
		r0 = rf(msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSticker provides a mock function with given fields: sticker
func (_m *API) DeleteSticker(sticker string) error {
	ret := _m.Called(sticker)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSticker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sticker)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStickerSet provides a mock function with given fields: name
func (_m *API) DeleteStickerSet(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStickerSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTopic provides a mock function with given fields: chat, topic
func (_m *API) DeleteTopic(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: file, localFilename
func (_m *API) Download(file *telebot.File, localFilename string) error {
	ret := _m.Called(file, localFilename)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.File, string) error); ok {
		r0 = rf(file, localFilename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Edit provides a mock function with given fields: msg, what, opts
func (_m *API) Edit(msg telebot.Editable, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, msg, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Edit")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(msg, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(msg, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, interface{}, ...interface{}) error); ok {
		r1 = rf(msg, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditCaption provides a mock function with given fields: msg, caption, opts
func (_m *API) EditCaption(msg telebot.Editable, caption string, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, msg, caption)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditCaption")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, string, ...interface{}) (*telebot.Message, error)); ok {
		return rf(msg, caption, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, string, ...interface{}) *telebot.Message); ok {
		r0 = rf(msg, caption, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, string, ...interface{}) error); ok {
		r1 = rf(msg, caption, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditGeneralTopic provides a mock function with given fields: chat, topic
func (_m *API) EditGeneralTopic(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for EditGeneralTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditInviteLink provides a mock function with given fields: chat, link
func (_m *API) EditInviteLink(chat telebot.Recipient, link *telebot.ChatInviteLink) (*telebot.ChatInviteLink, error) {
	ret := _m.Called(chat, link)

	if len(ret) == 0 {
		panic("no return value specified for EditInviteLink")
	}

	var r0 *telebot.ChatInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.ChatInviteLink) (*telebot.ChatInviteLink, error)); ok {
		return rf(chat, link)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.ChatInviteLink) *telebot.ChatInviteLink); ok {
		r0 = rf(chat, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, *telebot.ChatInviteLink) error); ok {
		r1 = rf(chat, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditMedia provides a mock function with given fields: msg, media, opts
func (_m *API) EditMedia(msg telebot.Editable, media telebot.Inputtable, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, msg, media)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EditMedia")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, telebot.Inputtable, ...interface{}) (*telebot.Message, error)); ok {
		return rf(msg, media, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, telebot.Inputtable, ...interface{}) *telebot.Message); ok {
		r0 = rf(msg, media, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, telebot.Inputtable, ...interface{}) error); ok {
		r1 = rf(msg, media, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditReplyMarkup provides a mock function with given fields: msg, markup
func (_m *API) EditReplyMarkup(msg telebot.Editable, markup *telebot.ReplyMarkup) (*telebot.Message, error) {
	ret := _m.Called(msg, markup)

	if len(ret) == 0 {
		panic("no return value specified for EditReplyMarkup")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, *telebot.ReplyMarkup) (*telebot.Message, error)); ok {
		return rf(msg, markup)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, *telebot.ReplyMarkup) *telebot.Message); ok {
		r0 = rf(msg, markup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, *telebot.ReplyMarkup) error); ok {
		r1 = rf(msg, markup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditTopic provides a mock function with given fields: chat, topic
func (_m *API) EditTopic(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for EditTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// File provides a mock function with given fields: file
func (_m *API) File(file *telebot.File) (io.ReadCloser, error) {
	ret := _m.Called(file)

	if len(ret) == 0 {
		panic("no return value specified for File")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.File) (io.ReadCloser, error)); ok {
		return rf(file)
	}
	if rf, ok := ret.Get(0).(func(*telebot.File) io.ReadCloser); ok {
		r0 = rf(file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.File) error); ok {
		r1 = rf(file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileByID provides a mock function with given fields: fileID
func (_m *API) FileByID(fileID string) (telebot.File, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for FileByID")
	}

	var r0 telebot.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (telebot.File, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(string) telebot.File); ok {
		r0 = rf(fileID)
	} else {
		r0 = ret.Get(0).(telebot.File)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Forward provides a mock function with given fields: to, msg, opts
func (_m *API) Forward(to telebot.Recipient, msg telebot.Editable, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Forward")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, msg, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, msg, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Editable, ...interface{}) error); ok {
		r1 = rf(to, msg, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForwardMany provides a mock function with given fields: to, msgs, opts
func (_m *API) ForwardMany(to telebot.Recipient, msgs []telebot.Editable, opts ...*telebot.SendOptions) ([]telebot.Message, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, to, msgs)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForwardMany")
	}

	var r0 []telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) ([]telebot.Message, error)); ok {
		return rf(to, msgs, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) []telebot.Message); ok {
		r0 = rf(to, msgs, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, []telebot.Editable, ...*telebot.SendOptions) error); ok {
		r1 = rf(to, msgs, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameScores provides a mock function with given fields: user, msg
func (_m *API) GameScores(user telebot.Recipient, msg telebot.Editable) ([]telebot.GameHighScore, error) {
	ret := _m.Called(user, msg)

	if len(ret) == 0 {
		panic("no return value specified for GameScores")
	}

	var r0 []telebot.GameHighScore
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable) ([]telebot.GameHighScore, error)); ok {
		return rf(user, msg)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable) []telebot.GameHighScore); ok {
		r0 = rf(user, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.GameHighScore)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Editable) error); ok {
		r1 = rf(user, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HideGeneralTopic provides a mock function with given fields: chat
func (_m *API) HideGeneralTopic(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for HideGeneralTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InviteLink provides a mock function with given fields: chat
func (_m *API) InviteLink(chat *telebot.Chat) (string, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for InviteLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) (string, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Chat) string); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*telebot.Chat) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Leave provides a mock function with given fields: chat
func (_m *API) Leave(chat telebot.Recipient) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for Leave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Len provides a mock function with given fields: chat
func (_m *API) Len(chat *telebot.Chat) (int, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for Len")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) (int, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Chat) int); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*telebot.Chat) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields:
func (_m *API) Logout() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MenuButton provides a mock function with given fields: chat
func (_m *API) MenuButton(chat *telebot.User) (*telebot.MenuButton, error) {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for MenuButton")
	}

	var r0 *telebot.MenuButton
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.User) (*telebot.MenuButton, error)); ok {
		return rf(chat)
	}
	if rf, ok := ret.Get(0).(func(*telebot.User) *telebot.MenuButton); ok {
		r0 = rf(chat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.MenuButton)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.User) error); ok {
		r1 = rf(chat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyDescription provides a mock function with given fields: language
func (_m *API) MyDescription(language string) (*telebot.BotInfo, error) {
	ret := _m.Called(language)

	if len(ret) == 0 {
		panic("no return value specified for MyDescription")
	}

	var r0 *telebot.BotInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.BotInfo, error)); ok {
		return rf(language)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.BotInfo); ok {
		r0 = rf(language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.BotInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyName provides a mock function with given fields: language
func (_m *API) MyName(language string) (*telebot.BotInfo, error) {
	ret := _m.Called(language)

	if len(ret) == 0 {
		panic("no return value specified for MyName")
	}

	var r0 *telebot.BotInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.BotInfo, error)); ok {
		return rf(language)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.BotInfo); ok {
		r0 = rf(language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.BotInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyShortDescription provides a mock function with given fields: language
func (_m *API) MyShortDescription(language string) (*telebot.BotInfo, error) {
	ret := _m.Called(language)

	if len(ret) == 0 {
		panic("no return value specified for MyShortDescription")
	}

	var r0 *telebot.BotInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.BotInfo, error)); ok {
		return rf(language)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.BotInfo); ok {
		r0 = rf(language)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.BotInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(language)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Notify provides a mock function with given fields: to, action, threadID
func (_m *API) Notify(to telebot.Recipient, action telebot.ChatAction, threadID ...int) error {
	_va := make([]interface{}, len(threadID))
	for _i := range threadID {
		_va[_i] = threadID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, to, action)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.ChatAction, ...int) error); ok {
		r0 = rf(to, action, threadID...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Pin provides a mock function with given fields: msg, opts
func (_m *API) Pin(msg telebot.Editable, opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Pin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) error); ok {
		r0 = rf(msg, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfilePhotosOf provides a mock function with given fields: user
func (_m *API) ProfilePhotosOf(user *telebot.User) ([]telebot.Photo, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ProfilePhotosOf")
	}

	var r0 []telebot.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.User) ([]telebot.Photo, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*telebot.User) []telebot.Photo); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Promote provides a mock function with given fields: chat, member
func (_m *API) Promote(chat *telebot.Chat, member *telebot.ChatMember) error {
	ret := _m.Called(chat, member)

	if len(ret) == 0 {
		panic("no return value specified for Promote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.ChatMember) error); ok {
		r0 = rf(chat, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Raw provides a mock function with given fields: method, payload
func (_m *API) Raw(method string, payload interface{}) ([]byte, error) {
	ret := _m.Called(method, payload)

	if len(ret) == 0 {
		panic("no return value specified for Raw")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}) ([]byte, error)); ok {
		return rf(method, payload)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}) []byte); ok {
		r0 = rf(method, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}) error); ok {
		r1 = rf(method, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// React provides a mock function with given fields: to, msg, r
func (_m *API) React(to telebot.Recipient, msg telebot.Editable, r telebot.Reactions) error {
	ret := _m.Called(to, msg, r)

	if len(ret) == 0 {
		panic("no return value specified for React")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, telebot.Reactions) error); ok {
		r0 = rf(to, msg, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefundStars provides a mock function with given fields: to, chargeID
func (_m *API) RefundStars(to telebot.Recipient, chargeID string) error {
	ret := _m.Called(to, chargeID)

	if len(ret) == 0 {
		panic("no return value specified for RefundStars")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string) error); ok {
		r0 = rf(to, chargeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveWebhook provides a mock function with given fields: dropPending
func (_m *API) RemoveWebhook(dropPending ...bool) error {
	_va := make([]interface{}, len(dropPending))
	for _i := range dropPending {
		_va[_i] = dropPending[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...bool) error); ok {
		r0 = rf(dropPending...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReopenGeneralTopic provides a mock function with given fields: chat
func (_m *API) ReopenGeneralTopic(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for ReopenGeneralTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReopenTopic provides a mock function with given fields: chat, topic
func (_m *API) ReopenTopic(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for ReopenTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplaceStickerInSet provides a mock function with given fields: of, stickerSet, oldSticker, sticker
func (_m *API) ReplaceStickerInSet(of telebot.Recipient, stickerSet string, oldSticker string, sticker telebot.InputSticker) (bool, error) {
	ret := _m.Called(of, stickerSet, oldSticker, sticker)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceStickerInSet")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string, string, telebot.InputSticker) (bool, error)); ok {
		return rf(of, stickerSet, oldSticker, sticker)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string, string, telebot.InputSticker) bool); ok {
		r0 = rf(of, stickerSet, oldSticker, sticker)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, string, string, telebot.InputSticker) error); ok {
		r1 = rf(of, stickerSet, oldSticker, sticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reply provides a mock function with given fields: to, what, opts
func (_m *API) Reply(to *telebot.Message, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Reply")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Message, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Message, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.Message, interface{}, ...interface{}) error); ok {
		r1 = rf(to, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Respond provides a mock function with given fields: c, resp
func (_m *API) Respond(c *telebot.Callback, resp ...*telebot.CallbackResponse) error {
	_va := make([]interface{}, len(resp))
	for _i := range resp {
		_va[_i] = resp[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Respond")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Callback, ...*telebot.CallbackResponse) error); ok {
		r0 = rf(c, resp...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Restrict provides a mock function with given fields: chat, member
func (_m *API) Restrict(chat *telebot.Chat, member *telebot.ChatMember) error {
	ret := _m.Called(chat, member)

	if len(ret) == 0 {
		panic("no return value specified for Restrict")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.ChatMember) error); ok {
		r0 = rf(chat, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeInviteLink provides a mock function with given fields: chat, link
func (_m *API) RevokeInviteLink(chat telebot.Recipient, link string) (*telebot.ChatInviteLink, error) {
	ret := _m.Called(chat, link)

	if len(ret) == 0 {
		panic("no return value specified for RevokeInviteLink")
	}

	var r0 *telebot.ChatInviteLink
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string) (*telebot.ChatInviteLink, error)); ok {
		return rf(chat, link)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string) *telebot.ChatInviteLink); ok {
		r0 = rf(chat, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatInviteLink)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, string) error); ok {
		r1 = rf(chat, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: to, what, opts
func (_m *API) Send(to telebot.Recipient, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, interface{}, ...interface{}) error); ok {
		r1 = rf(to, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendAlbum provides a mock function with given fields: to, a, opts
func (_m *API) SendAlbum(to telebot.Recipient, a telebot.Album, opts ...interface{}) ([]telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, a)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendAlbum")
	}

	var r0 []telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Album, ...interface{}) ([]telebot.Message, error)); ok {
		return rf(to, a, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Album, ...interface{}) []telebot.Message); ok {
		r0 = rf(to, a, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Album, ...interface{}) error); ok {
		r1 = rf(to, a, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPaid provides a mock function with given fields: to, stars, a, opts
func (_m *API) SendPaid(to telebot.Recipient, stars int, a telebot.PaidAlbum, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, stars, a)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendPaid")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, int, telebot.PaidAlbum, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, stars, a, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, int, telebot.PaidAlbum, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, stars, a, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, int, telebot.PaidAlbum, ...interface{}) error); ok {
		r1 = rf(to, stars, a, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAdminTitle provides a mock function with given fields: chat, user, title
func (_m *API) SetAdminTitle(chat *telebot.Chat, user *telebot.User, title string) error {
	ret := _m.Called(chat, user, title)

	if len(ret) == 0 {
		panic("no return value specified for SetAdminTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.User, string) error); ok {
		r0 = rf(chat, user, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCommands provides a mock function with given fields: opts
func (_m *API) SetCommands(opts ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCommands")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCustomEmojiStickerSetThumb provides a mock function with given fields: name, id
func (_m *API) SetCustomEmojiStickerSetThumb(name string, id string) error {
	ret := _m.Called(name, id)

	if len(ret) == 0 {
		panic("no return value specified for SetCustomEmojiStickerSetThumb")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultRights provides a mock function with given fields: rights, forChannels
func (_m *API) SetDefaultRights(rights telebot.Rights, forChannels bool) error {
	ret := _m.Called(rights, forChannels)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultRights")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Rights, bool) error); ok {
		r0 = rf(rights, forChannels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGameScore provides a mock function with given fields: user, msg, score
func (_m *API) SetGameScore(user telebot.Recipient, msg telebot.Editable, score telebot.GameHighScore) (*telebot.Message, error) {
	ret := _m.Called(user, msg, score)

	if len(ret) == 0 {
		panic("no return value specified for SetGameScore")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, telebot.GameHighScore) (*telebot.Message, error)); ok {
		return rf(user, msg, score)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Editable, telebot.GameHighScore) *telebot.Message); ok {
		r0 = rf(user, msg, score)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Editable, telebot.GameHighScore) error); ok {
		r1 = rf(user, msg, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGroupDescription provides a mock function with given fields: chat, description
func (_m *API) SetGroupDescription(chat *telebot.Chat, description string) error {
	ret := _m.Called(chat, description)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, string) error); ok {
		r0 = rf(chat, description)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGroupPermissions provides a mock function with given fields: chat, perms
func (_m *API) SetGroupPermissions(chat *telebot.Chat, perms telebot.Rights) error {
	ret := _m.Called(chat, perms)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, telebot.Rights) error); ok {
		r0 = rf(chat, perms)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGroupStickerSet provides a mock function with given fields: chat, setName
func (_m *API) SetGroupStickerSet(chat *telebot.Chat, setName string) error {
	ret := _m.Called(chat, setName)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupStickerSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, string) error); ok {
		r0 = rf(chat, setName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGroupTitle provides a mock function with given fields: chat, title
func (_m *API) SetGroupTitle(chat *telebot.Chat, title string) error {
	ret := _m.Called(chat, title)

	if len(ret) == 0 {
		panic("no return value specified for SetGroupTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, string) error); ok {
		r0 = rf(chat, title)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMenuButton provides a mock function with given fields: chat, mb
func (_m *API) SetMenuButton(chat *telebot.User, mb interface{}) error {
	ret := _m.Called(chat, mb)

	if len(ret) == 0 {
		panic("no return value specified for SetMenuButton")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.User, interface{}) error); ok {
		r0 = rf(chat, mb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMyDescription provides a mock function with given fields: desc, language
func (_m *API) SetMyDescription(desc string, language string) error {
	ret := _m.Called(desc, language)

	if len(ret) == 0 {
		panic("no return value specified for SetMyDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(desc, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMyName provides a mock function with given fields: name, language
func (_m *API) SetMyName(name string, language string) error {
	ret := _m.Called(name, language)

	if len(ret) == 0 {
		panic("no return value specified for SetMyName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMyShortDescription provides a mock function with given fields: desc, language
func (_m *API) SetMyShortDescription(desc string, language string) error {
	ret := _m.Called(desc, language)

	if len(ret) == 0 {
		panic("no return value specified for SetMyShortDescription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(desc, language)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerEmojis provides a mock function with given fields: sticker, emojis
func (_m *API) SetStickerEmojis(sticker string, emojis []string) error {
	ret := _m.Called(sticker, emojis)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerEmojis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(sticker, emojis)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerKeywords provides a mock function with given fields: sticker, keywords
func (_m *API) SetStickerKeywords(sticker string, keywords []string) error {
	ret := _m.Called(sticker, keywords)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerKeywords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(sticker, keywords)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerMaskPosition provides a mock function with given fields: sticker, mask
func (_m *API) SetStickerMaskPosition(sticker string, mask telebot.MaskPosition) error {
	ret := _m.Called(sticker, mask)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerMaskPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, telebot.MaskPosition) error); ok {
		r0 = rf(sticker, mask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerPosition provides a mock function with given fields: sticker, position
func (_m *API) SetStickerPosition(sticker string, position int) error {
	ret := _m.Called(sticker, position)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerPosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(sticker, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerSetThumb provides a mock function with given fields: of, set
func (_m *API) SetStickerSetThumb(of telebot.Recipient, set *telebot.StickerSet) error {
	ret := _m.Called(of, set)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerSetThumb")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, *telebot.StickerSet) error); ok {
		r0 = rf(of, set)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStickerSetTitle provides a mock function with given fields: s
func (_m *API) SetStickerSetTitle(s telebot.StickerSet) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for SetStickerSetTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.StickerSet) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetWebhook provides a mock function with given fields: w
func (_m *API) SetWebhook(w *telebot.Webhook) error {
	ret := _m.Called(w)

	if len(ret) == 0 {
		panic("no return value specified for SetWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Webhook) error); ok {
		r0 = rf(w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Ship provides a mock function with given fields: query, what
func (_m *API) Ship(query *telebot.ShippingQuery, what ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, what...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ship")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.ShippingQuery, ...interface{}) error); ok {
		r0 = rf(query, what...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StarTransactions provides a mock function with given fields: offset, limit
func (_m *API) StarTransactions(offset int, limit int) ([]telebot.StarTransaction, error) {
	ret := _m.Called(offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for StarTransactions")
	}

	var r0 []telebot.StarTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]telebot.StarTransaction, error)); ok {
		return rf(offset, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []telebot.StarTransaction); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.StarTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StickerSet provides a mock function with given fields: name
func (_m *API) StickerSet(name string) (*telebot.StickerSet, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for StickerSet")
	}

	var r0 *telebot.StickerSet
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*telebot.StickerSet, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *telebot.StickerSet); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.StickerSet)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopLiveLocation provides a mock function with given fields: msg, opts
func (_m *API) StopLiveLocation(msg telebot.Editable, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopLiveLocation")
	}

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) (*telebot.Message, error)); ok {
		return rf(msg, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) *telebot.Message); ok {
		r0 = rf(msg, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, ...interface{}) error); ok {
		r1 = rf(msg, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPoll provides a mock function with given fields: msg, opts
func (_m *API) StopPoll(msg telebot.Editable, opts ...interface{}) (*telebot.Poll, error) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopPoll")
	}

	var r0 *telebot.Poll
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) (*telebot.Poll, error)); ok {
		return rf(msg, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, ...interface{}) *telebot.Poll); ok {
		r0 = rf(msg, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Poll)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, ...interface{}) error); ok {
		r1 = rf(msg, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopicIconStickers provides a mock function with given fields:
func (_m *API) TopicIconStickers() ([]telebot.Sticker, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TopicIconStickers")
	}

	var r0 []telebot.Sticker
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]telebot.Sticker, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []telebot.Sticker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Sticker)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unban provides a mock function with given fields: chat, user, forBanned
func (_m *API) Unban(chat *telebot.Chat, user *telebot.User, forBanned ...bool) error {
	_va := make([]interface{}, len(forBanned))
	for _i := range forBanned {
		_va[_i] = forBanned[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, chat, user)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unban")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.User, ...bool) error); ok {
		r0 = rf(chat, user, forBanned...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnbanSenderChat provides a mock function with given fields: chat, sender
func (_m *API) UnbanSenderChat(chat *telebot.Chat, sender telebot.Recipient) error {
	ret := _m.Called(chat, sender)

	if len(ret) == 0 {
		panic("no return value specified for UnbanSenderChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, telebot.Recipient) error); ok {
		r0 = rf(chat, sender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnhideGeneralTopic provides a mock function with given fields: chat
func (_m *API) UnhideGeneralTopic(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for UnhideGeneralTopic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unpin provides a mock function with given fields: chat, messageID
func (_m *API) Unpin(chat telebot.Recipient, messageID ...int) error {
	_va := make([]interface{}, len(messageID))
	for _i := range messageID {
		_va[_i] = messageID[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, chat)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unpin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, ...int) error); ok {
		r0 = rf(chat, messageID...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnpinAll provides a mock function with given fields: chat
func (_m *API) UnpinAll(chat telebot.Recipient) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for UnpinAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnpinAllGeneralTopicMessages provides a mock function with given fields: chat
func (_m *API) UnpinAllGeneralTopicMessages(chat *telebot.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for UnpinAllGeneralTopicMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnpinAllTopicMessages provides a mock function with given fields: chat, topic
func (_m *API) UnpinAllTopicMessages(chat *telebot.Chat, topic *telebot.Topic) error {
	ret := _m.Called(chat, topic)

	if len(ret) == 0 {
		panic("no return value specified for UnpinAllTopicMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*telebot.Chat, *telebot.Topic) error); ok {
		r0 = rf(chat, topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadSticker provides a mock function with given fields: to, format, f
func (_m *API) UploadSticker(to telebot.Recipient, format string, f telebot.File) (*telebot.File, error) {
	ret := _m.Called(to, format, f)

	if len(ret) == 0 {
		panic("no return value specified for UploadSticker")
	}

	var r0 *telebot.File
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string, telebot.File) (*telebot.File, error)); ok {
		return rf(to, format, f)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, string, telebot.File) *telebot.File); ok {
		r0 = rf(to, format, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.File)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, string, telebot.File) error); ok {
		r1 = rf(to, format, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserBoosts provides a mock function with given fields: chat, user
func (_m *API) UserBoosts(chat telebot.Recipient, user telebot.Recipient) ([]telebot.Boost, error) {
	ret := _m.Called(chat, user)

	if len(ret) == 0 {
		panic("no return value specified for UserBoosts")
	}

	var r0 []telebot.Boost
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) ([]telebot.Boost, error)); ok {
		return rf(chat, user)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) []telebot.Boost); ok {
		r0 = rf(chat, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]telebot.Boost)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Recipient) error); ok {
		r1 = rf(chat, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Webhook provides a mock function with given fields:
func (_m *API) Webhook() (*telebot.Webhook, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Webhook")
	}

	var r0 *telebot.Webhook
	var r1 error
	if rf, ok := ret.Get(0).(func() (*telebot.Webhook, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *telebot.Webhook); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Webhook)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAPI creates a new instance of API. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *API {
	mock := &API{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
